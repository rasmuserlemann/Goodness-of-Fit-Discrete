library(stats)
library(DiscreteWeibull)


loglike = function(theta, x){
  if (theta[1] <= 0 | theta[1] >= 1 | theta[2] <= 0){
    return (10**(10))
  }
  final = 0
  for (data in x){
    final = final + log(theta[1]**(data**theta[2])-theta[1]**((data+1)**theta[2]))
  }
  return (-final)
}

likeG = function(x, p){
  final = 0
  for (data in x){
    final = final+log((p**data)*(1-p))
  }
  return (final)
}
likeW = function(x, theta){
  final = 0
  for (data in x){
    final = final+log(theta[1]**(data**theta[2])-theta[1]**((data+1)**theta[2]))
  }
  return (final)
}

LR = function(x){
  mleW = nlm(loglike, c(0.3,1), x=x)$estimate
  mleG = length(x)/(sum(x)+length(x))
  return (-2*(likeG(x,mleG)-likeW(x, mleW)))
}


alg1 = function(n, t){
  N = 0
  V = 0
  I = t+n-1
  k = c()
  while (N<n-1){
    p = runif(1)
    if (p<(n-1-N)/(t+n-1-N-V)){
      k = c(I,k)
      N = N+1
      I = I-1
    }
    else{
      V = V+1
      I = I-1
    }
  }
  return(k)
}

randombars = function(n,t){
  s1 = alg1(n, t)
  final = c(s1[1]-1)
  for (ind in 2:length(s1)){
    val = s1[ind]-ind-(s1[ind-1]-(ind-1))
    final = append(final, val)
  }
  final = append(final, t-(s1[length(s1)]-(n-1)))
  return (final)
}


vvv = 800
sig = 0.05
count2 = 0
for (ooo in 1:vvv){
#Alternative
n = 25
q = 0.7
beta = 0.8
d = rdweibull(n, q, beta, zero = TRUE)

P = 0.5
d = rgeom(n, P)
t = sum(d)

mmm = 500

MLE = n/(sum(d)+n)

CO = LR(d)

C = c()
for (pp in 1:mmm){
  s = randombars(n,t)
  C[pp] = LR(s)
}

condpvalue = length(C[C > CO])/length(C)
if (condpvalue < sig){
  count2 = count2 + 1
}
}

print(100*count2/vvv)
